package innerClassimport atomicTest.eqimport typeChecking.nameclass Fruit {    fun changeColor(color: String) =        "Fruit $color"    fun absorbWater(amount: Int) {}    inner class Seed { // @Seed라는 레이블이 암시적으로 붙는다        fun changeColor(color: String) = "Seed $color"        fun germinate() {}        fun whichThis() {            this.name eq "Seed"            this@Seed eq "Seed"            this@Fruit eq "Fruit"            // 현재 클래스의 내부 클래스에 @레이블을 써서 접근할 수는 없다            // this@DNA.name        }        inner class DNA {            fun changeColor(color: String) {                this@Seed.changeColor(color)                this@Fruit.changeColor(color)            }            fun plant() {                // 한정을 시키지 않고 외부 클래스 함수 호출 가능                germinate()                absorbWater(10)            }            // 확장 함수            fun Int.grow() {    // @grow라는 암시적 레이블이 붙는다                // 디폴트는 Int.grow()로, Int를 수신 객체로 받는다.                this.name eq "Int"                this@grow.name eq "Int"                this@DNA.name eq "DNA"                this@Seed.name eq "Seed"                this@Fruit.name eq "Fruit"            }            fun Seed.plant() {}            fun Fruit.plant() {}            fun whichThis() {                this.name eq "DNA"                this@Seed.name eq "Seed"                this@Fruit.name eq "Fruit"            }        }    }}fun Fruit.grow(amount: Int) {    absorbWater(amount)    changeColor("Red") eq "Fruit Red"}fun Fruit.Seed.grow(n: Int) {    germinate()    changeColor("Green") eq "Seed Green"}fun Fruit.Seed.DNA.grow(n: Int) = n.grow()fun main() {    val fruit = Fruit()    fruit.grow(4)    val seed = fruit.Seed()    seed.grow(9)    seed.whichThis()    val dna = seed.DNA()    dna.plant()    dna.grow(5)    dna.whichThis()    dna.changeColor("Purple")}